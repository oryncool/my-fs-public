import java.io.*;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class MyFile {
    public static void listDirectory(String path) {
        try {
            File file = new File(path);
            for (File oneFile : file.listFiles())
                System.out.println(oneFile.getName());
        } catch (Exception e) {
            System.out.println("директория не существует!");
        }
    }

    public static void listPythonFiles(String path) {
        try {
            File file = new File(path);
            for (File oneFile : file.listFiles())
                if (oneFile.getName().endsWith(".py"))
                    System.out.println(oneFile.getName());
        } catch (Exception e) {
            System.out.println("директория не существует!");
        }
    }

    public static void isDirectory(String path) {
        File file = new File(path);
        if (file.exists()) {
            if (file.isDirectory())
                System.out.println("true");
            else
                System.out.println("false");
        }
        else {
            System.out.println("файл или директория не существует!");
        }
    }

    public static void define(String path) {
        File file = new File(path);
        if (file.exists()) {
            if (file.isDirectory())
                System.out.println("директория");
            else
                System.out.println("файл");
        } else
            System.out.println("файл не существует");
    }

    public static void printPermissions(String path) {
        File file = new File(path);
        if (!file.exists()) {
            System.out.println("файл не существует!");
            return;
        }
        String permissions = "";
        if (file.canRead())
            permissions += 'r';
        else
            permissions += '-';
        if (file.canWrite())
            permissions += 'w';
        else
            permissions += '-';
        if (file.canExecute())
            permissions += 'x';
        else
            permissions += '-';
        System.out.println(permissions);

    }

    public static void setPermissions(String path, String permissions) {
        File file = new File(path);
        if (!file.exists()) {
            System.out.println("файл не существует!");
            return;
        }
        if (!((permissions.charAt(0) == 'r' || permissions.charAt(0) == '-') && (permissions.charAt(1) == 'w'|| permissions.charAt(1) == '-') && (permissions.charAt(2) == 'x'|| permissions.charAt(2) == '-'))) {
            System.out.println("указан невалидный формат для прав!");
            return;
        }
        file.setReadable(permissions.charAt(0) == 'r');
        file.setWritable(permissions.charAt(1) == 'w');
        file.setExecutable(permissions.charAt(2) == 'x');
    }

    public static void printContent(String path) {
        try {
            File file = new File(path);
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                System.out.println(line);
            }
            scanner.close();
        } catch (Exception e) {
            System.out.println("файл не существует!");
        }
    }

    public static void appendFooter(String path) {
        if (!new File(path).exists() || !new File(path).isFile()) {
            System.out.println("файл не существует!");
            return;
        }
        try {
            FileWriter file = new FileWriter(path, true);
            file.write("# Autogenerated line");
            file.close();
        }
        catch (IOException e) {
            System.out.println(e);
        }
    }

    public static void createBackup(String path) {
        if (!new File(path).exists()) {
            System.out.println("файл или директория не существует!");
            return;
        }
        LocalDateTime localDate = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String date = localDate.format(formatter);
        if (!new File("tmp").exists()) new File("tmp").mkdir();
        String directory = "tmp/" + date + ".backup";
        new File(directory).mkdir();
        backupFiles(path, directory);
    }

    public static void backupFiles(String path, String directory) {
        try {
            File file = new File(path);
            if (file.isDirectory()) {
                new File(directory + "/" + file.getName()).mkdir();
                for (File inFile : file.listFiles()) backupFiles(inFile.getPath(), directory + "/" + file.getName());
            }
            else {
                File newFile = new File(directory + "/" + file.getName());
                newFile.createNewFile();
                FileWriter fileWriter = new FileWriter(newFile);
                Scanner scanner = new Scanner(file);
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    fileWriter.write(line + "\n");
                }
                scanner.close();
                fileWriter.close();
            }
        }
        catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void printLongestWord(String path) {
        try {
            File file = new File(path);
            Scanner scanner = new Scanner(file);
            String longestWord = "";
            String current = "";
            while (scanner.hasNext()) {
                current = scanner.next();
                if (current.length() > longestWord.length()) longestWord = current;
            }
            System.out.println(longestWord);
            scanner.close();
        }
        catch(Exception e) {
            System.out.println(e);
        }
    }

    public static void help() {
        System.out.println(
                """
                        MyFS 1.0 команды:
                        ls <path>               выводит список всех файлов и директорий для `path`
                        ls_py <path>            выводит список файлов с расширением `.py` в `path`
                        is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`
                        define <path>           выводит `директория` или `файл` в зависимости от типа `path`
                        readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя
                        setmod <path> <perm>    устанавливает права для файла `path`
                        cat <path>              выводит контент файла
                        append <path>           добавляет строку `# Autogenerated line` в конец `path`
                        bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`
                        greplong <path>         выводит самое длинное слово в файле
                        help                    выводит список команд и их описание
                        exit                    завершает работу программы
                            """);
    }

    public static void exit() {
        System.out.println("Goodbye");
        System.exit(1);
    }

}
